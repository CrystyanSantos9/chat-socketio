<!DOCTYPE html>
<!--  This site was created in Webflow. http://www.webflow.com  -->
<!--  Last Published: Wed Oct 25 2017 13:24:09 GMT+0000 (UTC)  -->
<html data-wf-page="59f067da9cd27200014f0cae" data-wf-site="59f067da9cd27200014f0cad">

<head>
  <meta charset="utf-8">
  <title>ChatSocket.io</title>
  <meta content="width=device-width, initial-scale=1" name="viewport">
  <meta content="Webflow" name="generator">
  <link href="css/normalize.css" rel="stylesheet" type="text/css">
  <link href="css/webflow.css" rel="stylesheet" type="text/css">
  <link href="css/chatsocket-io.webflow.css" rel="stylesheet" type="text/css">
  <script src="https://ajax.googleapis.com/ajax/libs/webfont/1.4.7/webfont.js" type="text/javascript"></script>
  <script
    type="text/javascript">WebFont.load({ google: { families: ["Open Sans:300,300italic,400,400italic,600,600italic,700,700italic,800,800italic"] } });</script>
  <!-- [if lt IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.min.js" type="text/javascript"></script><![endif] -->
  <script
    type="text/javascript">!function (o, c) { var n = c.documentElement, t = " w-mod-"; n.className += t + "js", ("ontouchstart" in o || o.DocumentTouch && c instanceof DocumentTouch) && (n.className += t + "touch") }(window, document);</script>
  <link href="https://daks2k3a4ib2z.cloudfront.net/img/favicon.ico" rel="shortcut icon" type="image/x-icon">
  <link href="https://daks2k3a4ib2z.cloudfront.net/img/webclip.png" rel="apple-touch-icon">
</head>

<body>
  <div class="container w-container">
    <div class="rooms">
      <h1 class="title-rooms">Salas Disponíveis</h1>
      <ul class="room-list w-list-unstyled">
        <li class="room-item">Sala 1</li>
        <li class="room-item">Sala 2</li>
        <li class="room-item">Sala 3 <span class="notifications">(2)</span></li>
      </ul>
      <div class="add-room">+</div>
    </div>
    <div class="room">
      <div class="messages">
        <div class="message"><span class="author">
            <%= name %>
          </span><br><span class="msg-body">Mensagem aqui</span></div>
      </div>
      <div class="new-message-form w-form">
        <form>
          <textarea id="field" name="field" maxlength="5000" placeholder="Digite sua mensagem e pressione &lt;Enter&gt;"
            autofocus="true" class="msg w-input"></textarea>
          <span style="display: flex; ">
            <button type="button" class="send-audio w-button">Enviar<br>Áudio</button>
            <!-- <button type="button" class="start-counter w-button">Contar tempo<br></button> -->
            <div class="slidecontainer">
              <input type="range" min="1" max="10" value="1" class="slider" id="myRange">
            </div>
          </span>
        </form>
      </div>
    </div>
  </div>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js" type="text/javascript"></script>
  <script src="js/webflow.js" type="text/javascript"></script>
  <!-- [if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif] -->
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io('https://chatio.local/', { secure: true });
    $(function () {
      const socket = io()
      let selectedRomm = ''
      let mediaRecorder
      let audioPermission = false

      navigator
        .mediaDevices
        .getUserMedia({ audio: true })
        .then(stream => {
          audioPermission = true
          mediaRecorder = new MediaRecorder(stream)
          let chunks = []
          mediaRecorder.ondataavailable = data => {
            // data received
            chunks.push(data.data)
          }
          mediaRecorder.onstop = () => {
            //data sent 
            //api file reader 
            const reader = new window.FileReader()
            //crio um objeto binário, falando que dentro tem um aúdio 
            const blob = new Blob(chunks, { type: 'audio/ogg; codec=opus' })
            //Para construir url com dados dentro usando base64
            reader.readAsDataURL(blob)
            //quando ele terminar de criar a url com dados dentro
            reader.onloadend = () => {
              socket.emit('sendAudio', {
                data: reader.result,
                room: selectedRomm
              })
            }
            chunks = []
          }
        }, err => {
          mediaRecorder = null
          audioPermission = false
        })

      //Botão que envia áudio 
      // $('.send-audio')
      //   .mouseup(function () {
      //     // console.log('quando solto o click >> up')
      //     if (audioPermission && selectedRomm !== '') {
      //       mediaRecorder.stop()
      //     }
      //   })
      //   .mousedown(function () {
      //     if (audioPermission && selectedRomm !== '') {
      //       mediaRecorder.start()
      //     }
      //   })

      class EventTimeCountAudioRecord {
        constructor(event) {
          this.__timeCount = 1
          this.__maxTime = 10
          this.__evento = event
          this.__counter = ''
        }

        initCount() {
          console.log('start couting')
          this.__counter = setInterval(() => {
            $('#myRange').val(this.__timeCount)
            if (this.__timeCount >= this.__maxTime) {
              console.log('stop count', this.__timeCount)
              this.stopCount()
            }
            this.__timeCount += 1
          }, 1000)
        }

        stopCount() {
          console.log("stop counting")
          clearInterval(this.__counter)
          this.__timeCount = 1
          $('#myRange').val(this.__timeCount)
        }
      }

      const newCount = new EventTimeCountAudioRecord()

      // $('.start-counter').on('touchstart', event =>{
      //   if (event.type === 'touchstart') {
      //     newCount.initCount()
      //   }
      // })

      // $('.start-counter').on('touchend', event =>{
      //   if (event.type === 'touchend') {
      //     newCount.stopCount()
      //   }
      // })


      $('.send-audio').on('touchstart touchend mousedown mouseup', (event) => {
        if (selectedRomm !== '' && (event.type === 'touchstart' || event.type === 'mousedown')) {
          mediaRecorder.start()
          newCount.initCount()
        } else if (selectedRomm !== '' && (event.type === 'touchend' || event.type === 'mouseup')) {
          mediaRecorder.stop()
          newCount.stopCount()
        } else {
          return ''
        }
      })

      //pegando comando enter do textarea = unicode de enter = 13
      $('.msg').keyup(function (key) {
        if (selectedRomm !== '' && key.keyCode === 13) {
          socket.emit('sendMsg', {
            msg: $('.msg').val(),
            room: selectedRomm
          })
          //assim que enviar limpar o campo 
          $('.msg').val('')
        }
      })

      // seleciona sala dar join
      $('.room-list').on('click', '.room-item', function () {
        const roomId = $(this).attr('data-id')
        socket.emit('join', roomId)
        selectedRomm = roomId
        $('#' + roomId + ' .notifications').show()
        $('#' + roomId + ' .notifications span').text('0')
      })

      //recebe mensagem enviada e mostra na sala para todos
      socket.on('newMsg', msg => {
        if (selectedRomm === msg.room) {
          addMsg(msg)
        } else {
          // atualizar contador de msgs não lidas
          const id = msg.room 
          //uso span para peagr o valor dento do span dentro da classe 
          //usamos text para pegar e alterar o valor do elemento html e não value 
          let count = parseInt($('#'+id+' .notifications span').text())
          //adiciona mais mensagem não lida 
          count+=1
          $('#'+id+' .notifications span').text(count)
        }
      })

      //recebe mensagem enviada e mostra na sala para todos
      socket.on('newAudio', msg => {
        if (selectedRomm === msg.room) {
          addMsg(msg)
        } else {
          // atualizar contador de msgs não lidas
        }
      })

      //recebe mensagens quando clicar nas salas
      socket.on('msgsList', msgs => {
        $('.messages').html('') //limpamos a tela
        msgs.map(addMsg) //para cada mensagem presente no array, enviamos ela para a função template
      })

      const addRoom = (id, roomName) => {
        $('.room-list').append('<li id="' + id + '" data-id="' + id + '" class="room-item">' + roomName + '<span class="notifications">(<span>0</span>)</span></li>')
        $('#' + id + ' .notifications').hide()
      }

      const renderMsg = (type, msg) => {
        if (type === 'text') {
          return msg
        } else if (type === 'audio') {
          return `
            <audio controls>
              <source src="${msg}" type="audio/ogg">
            </audio>  
          `}
        return ''
      }
      //seleciona elemento msg-body para exibir mensagem na sala
      const addMsg = (msg) => {
        const html = `<div class="message">
          <span class="author">${msg.author}</span><br>
          <span class="msg-body">${renderMsg(msg.type, msg.message)}</span>
        `
        $('.messages').append(html)
      }

      //evento para escutar a criação de nova sala 
      socket.on('newRoom', room => {
        addRoom(room._id, room.name)
      })

      socket.on('roomList', rooms => {
        $('.room-list').html('')
        rooms.map(room => {
          addRoom(room._id, room.name)
        })
      })

      $('.add-room').click(function () {
        const roomName = prompt('Informe o nome da sala')
        if (roomName) {
          socket.emit('addRoom', roomName)
        }
      })
    })
  </script>
</body>

</html>